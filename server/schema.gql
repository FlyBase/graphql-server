type Gene {
  id: ID!
  symbol: String
  alleles: [Allele]
  insertions: [Insertion]
}

type Allele {
  id: ID!
  symbol: String
  isConstruct: Boolean
  geneIsRegulatoryRegion: Boolean
  classes: [CVTerm]
  mutagens: [CVTerm]
  stocksCount: Int
  pubCount: Int
  knownLesion: Boolean
  hasImage: Boolean
  constructs: [Construct]
  insertions: [Insertion]
  insertedElementTypes: [CVTerm]
  regRegions: [Tool]
  encodedTools: [Tool]
  encodedToolUses: [CVTerm]
  taggedWith: [Tool]
  tagUses: [CVTerm]
  alsoCarries: [Tool]
  variants: [Variant]
  synonyms: [String]
  category: String
  hasDisease: Boolean
  hasPhenotype: Boolean
  transgenicProductClassList: String
}

type CVTerm {
  id: ID!
  name: String!
}

type Insertion {
  id: ID!
  symbol: String
  insertedElementTypes: [CVTerm]
  regRegions: [Tool]
  encodedTools: [Tool]
  encodedToolUses: [CVTerm]
  taggedWith: [Tool]
  tagUses: [CVTerm]
  alsoCarries: [Tool]
  stocksCount: Int
  pubCount: Int
}

type Construct {
  id: ID!
  symbol: String
}

type Tool {
  id: ID!
  symbol: String
}

type Stock {
  id: ID!
  genotype: String
  stockNumber: String
  center: String
}

type ExpressionToolSearchResult {
  id: ID!
  expression_terms: [CVTerm]!
}

input ExpressionSearchInput {
  stage: String
  stageq: String
  anatomy: String
  anatomyq: String
  subcellular: String
  subcellularq: String
}

type Location {
  chromosome: String
  start: Int
  end: Int
  assembly: String
  strand: String
}

type Variant {
  id: ID!
  name: String
  type: String
  genomicReferenceSequence: String
  genomicVariantSequence: String
  variantType: CVTerm
  location: Location
  transcriptList: String
  displayName: String
  nucleotideChange: String
  consequence: String
}

input AllianceVariantsByGene {
  asc: String
  filter_disease: String
  filter_phenotype: String
  filter_source: String
  filter_symbol: String
  filter_synonym: String
  filter_variantConsequence: String
  filter_variantType: String
  limit: Int
  page: Int
  sortBy: String
}

input AllianceVariantsByAllele {
  filter_variantConsequence: String
  filter_variantType: String
  limit: Int
  page: Int
  sortBy: String
}

type VariantsByGeneResult {
  alleles: [Allele]
}

type VariantsByAlleleResult {
  variants: [Variant]
}

union Result = ExpressionToolSearchResult

type FlyBaseAPIResult {
  resultset: ResultSet!
}

type ResultSet {
  api_version: String!
  data_version: String!
  query_url: String!
  query_time: String!
  data_provider: String!
  result: [Result!]!
}

type Query {
  allelesByGene(
    fbgn: String!
    isConstruct: Boolean
    geneIsRegulatoryRegion: Boolean
  ): Gene
  alleleById(fbal: String!): Allele
  allelesByIds(fbal_ids: [String]!): [Allele]
  insertionsWithoutAllelesByGene(fbgn: String!): Gene
  searchExpressionTools(
    expression: ExpressionSearchInput
    gene: String
  ): [ExpressionToolSearchResult]
  getAllianceVariantsByGene(
    id: String
    params: AllianceVariantsByGene
  ): VariantsByGeneResult
  getAllianceVariantsByAllele(
    id: String
    params: AllianceVariantsByAllele
  ): VariantsByAlleleResult
}
